@model NewsViewModel

@{
    ViewData["Title"] = "All news";
}

<label for="feeds">Choose a News feed:</label>

<select name="feeds" id="feeds" onchange="toggleFeedSelection()" class="custom-select select">
    <option value=0>All feeds</option>
    @foreach (var item in Model.News.Select(x => x.NewsFeed).Distinct())
    {
        <option value=@item.Id>@item.Name</option>
    }
</select>

<button class="button subscribe-button" onclick="subscribeToFeed()">Subscribe</button>
<button class="button unsubscribe-button" onclick="unSubscribeToFeed()">Unsubscribe</button>

@foreach (var item in Model.News)
{
    <div class="card feed-@item.NewsFeed.Id" id="news-@item.Id" asp-action="Details" asp-route-id="@item.Id">
        <p>
            @item.NewsFeed.Name - @item.Timestamp.ToString("MM/dd/yyyy")
        </p>
        <a asp-action="Details" asp-route-id="@item.Id">
            <h2>
                @item.Title
            </h2>
        </a>
    </div>
}
@section scripts {
    <script type="text/javascript">
        var subscribedFeedIds = @Html.Raw(Json.Serialize(Model.User.SubscribedFeeds.Select(x => x.NewsFeedId).ToList()));

        var unsubscribeButton = document.getElementsByClassName("unsubscribe-button");
        var subscribeButton = document.getElementsByClassName("subscribe-button");

        function toggleFeedSelection() {
            var select = document.getElementById("feeds")
            var allCards = document.getElementsByClassName("card");
            var selectedCards = document.getElementsByClassName("feed-" + select.value);

            if (select.value === "0") {
                changeDisplayOfElements(allCards, 'block');
                changeDisplayOfElements(subscribeButton, 'none');
                changeDisplayOfElements(unsubscribeButton, 'none');
            }
            else {
                changeDisplayOfElements(allCards, 'none');
                changeDisplayOfElements(selectedCards, 'block');
                if (subscribedFeedIds.includes(Number(select.value))) {
                    changeDisplayOfElements(unsubscribeButton, 'inline-block');
                    changeDisplayOfElements(subscribeButton, 'none');
                } else {
                    changeDisplayOfElements(subscribeButton, 'inline-block');
                    changeDisplayOfElements(unsubscribeButton, 'none');
                }
            }
        }

        function changeDisplayOfElements(elements, display) {
            for (i = 0; i < elements.length; i++) {
                elements[i].style.display = display;
            }
        }

        function subscribeToFeed() {
            sendSubscriptionRequest('POST');
            changeDisplayOfElements(unsubscribeButton, 'inline-block');
            changeDisplayOfElements(subscribeButton, 'none');
            subscribedFeedIds.push(Number(document.getElementById("feeds").value))
        }

        function unSubscribeToFeed() {
            sendSubscriptionRequest('DELETE');
            changeDisplayOfElements(subscribeButton, 'inline-block');
            changeDisplayOfElements(unsubscribeButton, 'none');
            var itemIndex = subscribedFeedIds.indexOf(Number(document.getElementById("feeds").value));
            if (itemIndex > -1) {
                subscribedFeedIds.splice(itemIndex, 1)
            }
        }

        function sendSubscriptionRequest(method) {
            var data = Number(document.getElementById("feeds").value)

            $.ajax({
                url: '/api/subscription',
                type: method,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(data)
            })
                .done(function (result) {
                    alert(result)
                });
        }

    </script>
}